diff --git a/.gitignore b/.gitignore
index 4460159c..b36eec62 100644
--- a/.gitignore
+++ b/.gitignore
@@ -59,3 +59,5 @@ stamp-*
 /mpc*
 /gmp*
 /isl*
+
+/objdir/
diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index 99316156..ed8d3d1c 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -358,7 +358,7 @@ static const struct opcode_name_t opcode_name_list[] =
   {"OP",        0x33},
   {"LUI",       0x37},
   {"OP_32",     0x3b},
-  /* 64b        0x3f.  */
+  {"64b",       0x3f},
 
   {"MADD",      0x43},
   {"MSUB",      0x47},
@@ -563,6 +563,9 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       return FALSE;
     }
 
+  if (RISCV_IS_UNCERTAIN_AWARE(opc->match))
+    used_bits = (used_bits << 32) | (used_bits >> 32);
+
 #define USE_BITS(mask,shift)	(used_bits |= ((insn_t)(mask) << (shift)))
   while (*p)
     switch (c = *p++)
@@ -637,6 +640,7 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       case 's':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;
       case 't':	USE_BITS (OP_MASK_RS2,		OP_SH_RS2);	break;
       case 'r':	USE_BITS (OP_MASK_RS3,          OP_SH_RS3);     break;
+      case 'b':	USE_BITS (OP_MASK_UNCERTAINTY_MEMORY_SOURCE, OP_SH_UNCERTAINTY_MEMORY_SOURCE); break;
       case 'P':	USE_BITS (OP_MASK_PRED,		OP_SH_PRED); break;
       case 'Q':	USE_BITS (OP_MASK_SUCC,		OP_SH_SUCC); break;
       case 'o':
@@ -645,6 +649,7 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       case 'p':	used_bits |= ENCODE_SBTYPE_IMM (-1U); break;
       case 'q':	used_bits |= ENCODE_STYPE_IMM (-1U); break;
       case 'u':	used_bits |= ENCODE_UTYPE_IMM (-1U); break;
+      case 'f':	used_bits |= ((uint64_t)ENCODE_ITYPE_IMM (-1U) << 32); break;
       case 'z': break;
       case '[': break;
       case ']': break;
@@ -682,6 +687,12 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
 	return FALSE;
       }
 #undef USE_BITS
+
+  /* Swap high and low words back into their proper places
+     for better error messages  */
+  if (RISCV_IS_UNCERTAIN_AWARE(opc->match))
+    used_bits = (used_bits << 32) | (used_bits >> 32);
+
   if (used_bits != required_bits)
     {
       as_bad (_("internal: bad RISC-V opcode (bits 0x%lx undefined): %s %s"),
@@ -1379,6 +1390,8 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
   int argnum;
   const struct percent_op_match *p;
   const char *error = "unrecognized opcode";
+  int is_uncertain_aware;
+  offsetT old_loadstore_displacement = ~0;
 
   /* Parse the name of the instruction.  Terminate the string if whitespace
      is found so that hash_find only sees the name part of the string.  */
@@ -1403,11 +1416,18 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 
       create_insn (ip, insn);
       argnum = 1;
+      is_uncertain_aware = RISCV_IS_UNCERTAIN_AWARE(ip->insn_opcode);
 
       imm_expr->X_op = O_absent;
       *imm_reloc = BFD_RELOC_UNUSED;
       p = percent_op_itype;
 
+      /* Swap lower and upper 32 bits in uncertainty aware instructions before  */
+      /* parsing. We use normal parsing rules for the floating point  */
+      /* part of the instruction and then swap back once we are done.  */
+      if (is_uncertain_aware)
+  ip->insn_opcode = (insn->match << 32) | (insn->match >> 32);
+
       for (args = insn->args;; ++args)
 	{
 	  s += strspn (s, " \t");
@@ -1416,6 +1436,10 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 	    case '\0': 	/* End of args.  */
 	      if (insn->pinfo != INSN_MACRO)
 		{
+      /* Swap uncertainty aware instruction back into the correct form. */
+      if (is_uncertain_aware)
+        ip->insn_opcode = (ip->insn_opcode << 32) | (ip->insn_opcode >> 32);
+
 		  if (!insn->match_func (insn, ip->insn_opcode))
 		    break;
 
@@ -1809,6 +1833,7 @@ rvc_lui:
 	    case 's':		/* Source register.  */
 	    case 't':		/* Target register.  */
 	    case 'r':		/* rs3.  */
+	    case 'b':		/* Uncertainty memory source register  */
 	      if (reg_lookup (&s, RCLASS_GPR, &regno))
 		{
 		  c = *args;
@@ -1831,6 +1856,13 @@ rvc_lui:
 		    case 'r':
 		      INSERT_OPERAND (RS3, *ip, regno);
 		      break;
+		    case 'b':
+          if (regno != ((ip->insn_opcode >> OP_SH_RS1) & OP_MASK_RS1))
+            as_fatal(_("We do not currently support storing best guess and uncertainty in different locations. Sorry!"));
+		      INSERT_OPERAND (UNCERTAINTY_MEMORY_SOURCE, *ip, regno);
+          // zero out the non uncertain memory location (as we ignore it for now)
+		      INSERT_OPERAND (RS1, *ip, 0);
+		      break;
 		    }
 		  continue;
 		}
@@ -1903,6 +1935,14 @@ rvc_lui:
 	      p = percent_op_itype;
 	      *imm_reloc = BFD_RELOC_RISCV_LO12_I;
 	      goto alu_op;
+	    case 'f':
+        old_loadstore_displacement = imm_expr->X_add_number;
+        /* leave value of p unchanged */
+        if (*imm_reloc != BFD_RELOC_RISCV_LO12_S && *imm_reloc != BFD_RELOC_RISCV_LO12_I)
+    as_fatal(_("internal error: uncertainty displacement must come after load/store displacement."));
+	      p = percent_op_itype;
+	      *imm_reloc = BFD_RELOC_RISCV_LO12_I;
+        goto load_store;
 	    case 'q': /* Store displacement.  */
 	      p = percent_op_stype;
 	      *imm_reloc = BFD_RELOC_RISCV_LO12_S;
@@ -1933,6 +1973,8 @@ alu_op:
 		      || imm_expr->X_add_number < -(signed)RISCV_IMM_REACH/2)
 		    break;
 		}
+        if(*args == 'f' && imm_expr->X_add_number != old_loadstore_displacement)
+          as_fatal(_("We do not currently support storing best guess and uncertainty in different locations. Sorry!"));
 
 	      s = expr_end;
 	      continue;
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index f09200c0..9e3b4f29 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -829,6 +829,48 @@
 #define CAUSE_SUPERVISOR_ECALL 0x9
 #define CAUSE_HYPERVISOR_ECALL 0xa
 #define CAUSE_MACHINE_ECALL 0xb
+
+
+#define UNCERTAIN_MATCH(BASE, UN) ((((uint64_t)BASE) << 32u) | UN)
+#define UNCERTAIN_MASK(BASE, UN) ((((uint64_t)BASE) << 32u) | UN)
+
+#define MATCH_UNFADD_S      UNCERTAIN_MATCH(MATCH_FADD_S,      0x000070BF)
+#define MASK_UNFADD_S       UNCERTAIN_MASK(MASK_FADD_S,        0xFFFFFFFF)
+#define MATCH_UNFSUB_S      UNCERTAIN_MATCH(MATCH_FSUB_S,      0x000070BF)
+#define MASK_UNFSUB_S       UNCERTAIN_MASK(MASK_FSUB_S,        0xFFFFFFFF)
+#define MATCH_UNFMUL_S      UNCERTAIN_MATCH(MATCH_FMUL_S,      0x000070BF)
+#define MASK_UNFMUL_S       UNCERTAIN_MASK(MASK_FMUL_S,        0xFFFFFFFF)
+#define MATCH_UNFDIV_S      UNCERTAIN_MATCH(MATCH_FDIV_S,      0x000070BF)
+#define MASK_UNFDIV_S       UNCERTAIN_MASK(MASK_FDIV_S,        0xFFFFFFFF)
+#define MATCH_UNFSGNJ_S     UNCERTAIN_MATCH(MATCH_FSGNJ_S,     0x000070BF)
+#define MASK_UNFSGNJ_S      UNCERTAIN_MASK(MASK_FSGNJ_S,       0xFFFFFFFF)
+#define MATCH_UNFSGNJN_S    UNCERTAIN_MATCH(MATCH_FSGNJN_S,    0x000070BF)
+#define MASK_UNFSGNJN_S     UNCERTAIN_MASK(MASK_FSGNJN_S,      0xFFFFFFFF)
+#define MATCH_UNFSGNJX_S    UNCERTAIN_MATCH(MATCH_FSGNJX_S,    0x000070BF)
+#define MASK_UNFSGNJX_S     UNCERTAIN_MASK(MASK_FSGNJX_S,      0xFFFFFFFF)
+#define MATCH_UNFMIN_S      UNCERTAIN_MATCH(MATCH_FMIN_S,      0x000070BF)
+#define MASK_UNFMIN_S       UNCERTAIN_MASK(MASK_FMIN_S,        0xFFFFFFFF)
+#define MATCH_UNFMAX_S      UNCERTAIN_MATCH(MATCH_FMAX_S,      0x000070BF)
+#define MASK_UNFMAX_S       UNCERTAIN_MASK(MASK_FMAX_S,        0xFFFFFFFF)
+#define MATCH_UNFSQRT_S     UNCERTAIN_MATCH(MATCH_FSQRT_S,     0x000070BF)
+#define MASK_UNFSQRT_S      UNCERTAIN_MASK(MASK_FSQRT_S,       0xFFFFFFFF)
+
+#define MATCH_UNFLW         UNCERTAIN_MATCH(MATCH_FLW,         0x000070BF)
+#define MASK_UNFLW          UNCERTAIN_MASK(MASK_FLW,           0x00007FFF)
+#define MATCH_UNFSW         UNCERTAIN_MATCH(MATCH_FSW,         0x000070BF)
+#define MASK_UNFSW          UNCERTAIN_MASK(MASK_FSW,           0x00007FFF)
+
+#define MATCH_UNUPG_S   0x38000053
+#define MASK_UNUPG_S    0xfe00007f
+#define MATCH_UNGCOV_S  0x78000053
+#define MASK_UNGCOV_S   0xfe00007f
+#define MATCH_UNSVAR_S  0xb8000053
+#define MASK_UNSVAR_S   0xfff0007f
+#define MATCH_UNCPVAR_S 0xb8100053
+#define MASK_UNCPVAR_S  0xfff0707f
+#define MATCH_UNCLVAR_S 0xb8200053
+#define MASK_UNCLVAR_S  0xfffff07f
+
 #endif
 #ifdef DECLARE_INSN
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index 4acc25ce..f5c28dad 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -196,6 +196,9 @@ static const char * const riscv_pred_succ[16] =
 #define RISCV_BRANCH_ALIGN (1 << RISCV_BRANCH_ALIGN_BITS)
 #define RISCV_BRANCH_REACH (RISCV_IMM_REACH * RISCV_BRANCH_ALIGN)
 
+#define RISCV_IS_UNCERTAIN_AWARE(opcode) \
+  ((opcode & 0xFFF) == 0x0BF)
+
 /* RV fields.  */
 
 #define OP_MASK_OP		0x7f
@@ -222,6 +225,8 @@ static const char * const riscv_pred_succ[16] =
 #define OP_SH_AQ		26
 #define OP_MASK_RL		0x1
 #define OP_SH_RL		25
+#define OP_MASK_UNCERTAINTY_MEMORY_SOURCE		0x1F
+#define OP_SH_UNCERTAINTY_MEMORY_SOURCE		47
 
 #define OP_MASK_CUSTOM_IMM	0x7f
 #define OP_SH_CUSTOM_IMM	25
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 764c4d4d..91f02fe3 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -225,6 +225,10 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
 	  break;
 
 	case 'b':
+	  print (info->stream, "%s",
+		 riscv_gpr_names[EXTRACT_OPERAND (UNCERTAINTY_MEMORY_SOURCE, l)]);
+	  break;
+
 	case 's':
 	  if ((l & MASK_JALR) == MATCH_JALR)
 	    maybe_print_address (pd, rs1, 0);
@@ -266,6 +270,11 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
 	  print (info->stream, "%d", (int)EXTRACT_ITYPE_IMM (l));
 	  break;
 
+	case 'f':
+	  print (info->stream, "%d",
+		 (int)EXTRACT_ITYPE_IMM (l >> 32));
+	  break;
+
 	case 'q':
 	  maybe_print_address (pd, rs1, EXTRACT_STYPE_IMM (l));
 	  print (info->stream, "%d", (int)EXTRACT_STYPE_IMM (l));
@@ -363,6 +372,7 @@ riscv_disassemble_insn (bfd_vma memaddr, insn_t word, disassemble_info *info)
   static const struct riscv_opcode *riscv_hash[OP_MASK_OP + 1];
   struct riscv_private_data *pd;
   int insnlen;
+	insn_t original_word;
 
 #define OP_HASH_IDX(i) ((i) & (riscv_insn_length (i) == 2 ? 0x3 : OP_MASK_OP))
 
@@ -435,8 +445,19 @@ riscv_disassemble_insn (bfd_vma memaddr, insn_t word, disassemble_info *info)
 
 	  /* It's a match.  */
 	  (*info->fprintf_func) (info->stream, "%s", op->name);
+
+		/* Is this a 64 bit uncertainty aware instruction? If so swap the
+				upper and lower 32 bits of the word before disassembling. */
+		if (RISCV_IS_UNCERTAIN_AWARE(word))
+			{
+				original_word = word;
+				word = (word >> 32) | (word << 32);
+			}
+
 	  print_insn_args (op->args, word, memaddr, info);
 
+		word = original_word;
+
 	  /* Try to disassemble multi-instruction addressing sequences.  */
 	  if (pd->print_addr != (bfd_vma)-1)
 	    {
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 72e6b9d4..313433ad 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -74,6 +74,7 @@ const char * const riscv_fpr_names_abi[NFPR] = {
 #define MASK_RVC_IMM ENCODE_RVC_IMM (-1U)
 #define MASK_UIMM ENCODE_UTYPE_IMM (-1U)
 #define MASK_RM (OP_MASK_RM << OP_SH_RM)
+#define MASK_UNCERTAINTY_AWARE_RM ((uint64_t)MASK_RM << 32)
 #define MASK_PRED (OP_MASK_PRED << OP_SH_PRED)
 #define MASK_SUCC (OP_MASK_SUCC << OP_SH_SUCC)
 #define MASK_AQ (OP_MASK_AQ << OP_SH_AQ)
@@ -695,6 +696,36 @@ const struct riscv_opcode riscv_opcodes[] =
 {"fcvt.q.lu", 64, {"Q", 0}, "D,s",  MATCH_FCVT_Q_LU | MASK_RM, MASK_FCVT_Q_L | MASK_RM, match_opcode, 0 },
 {"fcvt.q.lu", 64, {"Q", 0}, "D,s,m",  MATCH_FCVT_Q_LU, MASK_FCVT_Q_LU, match_opcode, 0 },
 
+/* Uncertain instructions    */
+{"unfmv.s",    0, {"XUN", 0}, "D,U",  MATCH_UNFSGNJ_S, MASK_UNFSGNJ_S, match_rs1_eq_rs2, INSN_ALIAS },
+{"unfneg.s",   0, {"XUN", 0}, "D,U",  MATCH_UNFSGNJN_S, MASK_UNFSGNJN_S, match_rs1_eq_rs2, INSN_ALIAS },
+{"unfabs.s",   0, {"XUN", 0}, "D,U",  MATCH_UNFSGNJX_S, MASK_UNFSGNJX_S, match_rs1_eq_rs2, INSN_ALIAS },
+{"unfsgnj.s",  0, {"XUN", 0}, "D,S,T",  MATCH_UNFSGNJ_S, MASK_UNFSGNJ_S, match_opcode, 0 },
+{"unfsgnjn.s", 0, {"XUN", 0}, "D,S,T",  MATCH_UNFSGNJN_S, MASK_UNFSGNJN_S, match_opcode, 0 },
+{"unfsgnjx.s", 0, {"XUN", 0}, "D,S,T",  MATCH_UNFSGNJX_S, MASK_UNFSGNJX_S, match_opcode, 0 },
+{"unfadd.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFADD_S | MASK_UNCERTAINTY_AWARE_RM, MASK_UNFADD_S | MASK_UNCERTAINTY_AWARE_RM, match_opcode, 0 },
+{"unfadd.s",   0, {"XUN", 0}, "D,S,T,m",  MATCH_UNFADD_S, MASK_UNFADD_S, match_opcode, 0 },
+{"unfsub.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFSUB_S | MASK_UNCERTAINTY_AWARE_RM, MASK_UNFSUB_S | MASK_UNCERTAINTY_AWARE_RM, match_opcode, 0 },
+{"unfsub.s",   0, {"XUN", 0}, "D,S,T,m",  MATCH_UNFSUB_S, MASK_UNFSUB_S, match_opcode, 0 },
+{"unfmul.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFMUL_S | MASK_UNCERTAINTY_AWARE_RM, MASK_UNFMUL_S | MASK_UNCERTAINTY_AWARE_RM, match_opcode, 0 },
+{"unfmul.s",   0, {"XUN", 0}, "D,S,T,m",  MATCH_UNFMUL_S, MASK_UNFMUL_S, match_opcode, 0 },
+{"unfdiv.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFDIV_S | MASK_UNCERTAINTY_AWARE_RM, MASK_UNFDIV_S | MASK_UNCERTAINTY_AWARE_RM, match_opcode, 0 },
+{"unfdiv.s",   0, {"XUN", 0}, "D,S,T,m",  MATCH_UNFDIV_S, MASK_UNFDIV_S, match_opcode, 0 },
+{"unfsqrt.s",  0, {"XUN", 0}, "D,S",  MATCH_UNFSQRT_S | MASK_UNCERTAINTY_AWARE_RM, MASK_UNFSQRT_S | MASK_UNCERTAINTY_AWARE_RM, match_opcode, 0 },
+{"unfsqrt.s",  0, {"XUN", 0}, "D,S,m",  MATCH_UNFSQRT_S, MASK_UNFSQRT_S, match_opcode, 0 },
+{"unfmin.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFMIN_S, MASK_UNFMIN_S, match_opcode, 0 },
+{"unfmax.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNFMAX_S, MASK_UNFMAX_S, match_opcode, 0 },
+{"unflw",      0, {"XUN", 0}, "D,o(s),f(b)",  MATCH_UNFLW, MASK_UNFLW, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"unfsw",      0, {"XUN", 0}, "T,q(s),f(b)",  MATCH_UNFSW, MASK_UNFSW, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"unupg.s",    0, {"XUN", 0}, "D,S,T",  MATCH_UNUPG_S | MASK_RM, MASK_UNUPG_S | MASK_RM, match_opcode, 0 },
+{"unupg.s",    0, {"XUN", 0}, "D,S,T,m",  MATCH_UNUPG_S, MASK_UNUPG_S, match_opcode, 0 },
+{"ungcov.s",   0, {"XUN", 0}, "D,S,T",  MATCH_UNGCOV_S | MASK_RM, MASK_UNGCOV_S | MASK_RM, match_opcode, 0 },
+{"ungcov.s",   0, {"XUN", 0}, "D,S,T,m",  MATCH_UNGCOV_S, MASK_UNGCOV_S, match_opcode, 0 },
+{"unsvar.s",   0, {"XUN", 0}, "D,S",  MATCH_UNSVAR_S | MASK_RM, MASK_UNSVAR_S | MASK_RM, match_opcode, 0 },
+{"unsvar.s",   0, {"XUN", 0}, "D,S,m",  MATCH_UNSVAR_S, MASK_UNSVAR_S, match_opcode, 0 },
+{"unclvar.s",  0, {"XUN", 0}, "D",  MATCH_UNCLVAR_S, MASK_UNCLVAR_S, match_opcode, 0 },
+{"uncpvar.s",  0, {"XUN", 0}, "D,S",  MATCH_UNCPVAR_S, MASK_UNCPVAR_S, match_opcode, 0 },
+
 /* Compressed instructions.  */
 {"c.unimp",    0, {"C", 0},   "",  0, 0xffffU,  match_opcode, 0 },
 {"c.ebreak",   0, {"C", 0},   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, 0 },
